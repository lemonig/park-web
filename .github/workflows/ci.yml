name: Build, Push, and Deploy Frontend Docker Image

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: sixnut/park-web
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 设置 Node.js 环境，并启用 yarn 缓存
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: yarn

      # 3. 安装依赖并构建 dist
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build frontend (skip ESLint)
        run: DISABLE_ESLINT_PLUGIN=true yarn build

      # 4. 登录 Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5. 构建并推送 Docker 镜像（移除缓存配置）
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }},${{ env.IMAGE_NAME }}:latest

      # 6. 部署到服务器
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            set -e
            docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
            docker stop ${{ env.IMAGE_NAME }} || true
            docker rm ${{ env.IMAGE_NAME }} || true
            docker rmi ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} || true
            docker pull ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            docker run -p 8080:80 -d --name ${{ env.IMAGE_NAME }} \
              --health-cmd "curl --fail http://localhost || exit 1" \
              --health-interval=10s --health-timeout=5s --health-retries=3 \
              ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            sleep 5
            docker ps -f name=${{ env.IMAGE_NAME }} | grep ${{ env.IMAGE_NAME }} || { echo "Container failed to start"; exit 1; }
